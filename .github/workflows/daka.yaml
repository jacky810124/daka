name: Daka

on:
  schedule:
    - cron: '0 0 * * *'
    - cron: '0 11 * * *'

jobs:
  daka:
    runs-on: ubuntu-latest

    env:
      MODULE: ${{ secrets.MODULE}}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      DELAY_START_MINS: ${{ secrets.DELAY_START_MINS }}
      DELAY_END_MINS: ${{ secrets.DELAY_END_MINS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Daka gogo
        if: github.event.schedule == '0 0 * * *'
        run: node src/index.js S > result.md

      - name: Daka bye
        if: github.event.schedule == '0 11 * * *'
        run: node src/index.js E > result.md

      - name: Process Daka Result
        id: daka
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const fs = require('fs').promises;

            // Read the result file using promise-based fs
            const result = await fs.readFile('./result.md', 'utf8');

            // Determine result status
            let resultStatus = 'failed';
            if (result.includes('daka success')) {
              console.log('Daka Success');
              resultStatus = 'success';
            } else if (result.includes('no daka')) {
              console.log('No Daka');
              resultStatus = 'no need';
            } else {
              console.log('Daka Failed');
            }

            // Determine clock type
            let clockType = '';
            if (result.includes('gogo')) {
              clockType = 'gogo';
            } else if (result.includes('bye')) {
              clockType = 'bye';
            }

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Daka ${resultStatus} ${clockType}`,
              body: result
            });

            console.log(`Created issue #${issue.data.number}`);

            return issue.data.number;

      - name: Close issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.daka.outputs.result }},
              state: 'closed'
            })
